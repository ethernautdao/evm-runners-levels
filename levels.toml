[[levels]]
id = "1"
file = "S01E01-Average"
contract = "Average"
type = "unsigned math"
description = """
  Write a function to find the average of two unsigned integers.
  Further reading: https://bit.ly/4842Lrq
  
  average(1,1) == 1
  average(1,2) == 1
  average(2,1) == 1
  average(0,4) == 2"""

[[levels]]
id = "2"
file = "S01E02-FibHash"
contract = "FibHash"
type = "hashing"
description = """
  Fibonacci hashing is a fast alternative to integer modulo for 
  hash tables. It utilizes the golden ratio (1.6180339...) and 
  its relationship with Fibonacci numbers to improve hash table 
  efficiency. Implement function `fibhash(x, k)`, where x is the
  256-bit input number and 2^k is the size of the hash table:  
  
  fibhash(x, k) == hash
  fibhash(5, 6) == 5
  fibhash(12345, 10) == 644

  More info: https://bit.ly/fibonacci-hashing"""


[[levels]]
id = "3"
file = "S01E03-Fibonacci"
contract = "Fibonacci"
type = "loops/math"
description = """
  Calculate the n-th Fibonacci number.
  
  fibonacci(0) == 0
  fibonacci(1) == 1
  fibonacci(5) == 5
  fibonacci(20) == 6765"""

[[levels]]
id = "4"
file = "S01E04-Prime"
contract = "Prime"
type = "loops/math"
description = """
  Check if a given input number is prime
  
  isPrime(0) == false
  isPrime(2) == true
  isPrime(4) == false
  isPrime(7) == true"""

[[levels]]
id = "5"
file = "S01E05-ArraySort"
contract = "ArraySort"
type = "sorting"
description = """
  Given an array of uint256, sort the array in ascending order
  and return it. The maximum length of the input array is 32.
   
  arraySort([9, 7, 8, 3, 1]) == [1, 3, 7, 8, 9]"""
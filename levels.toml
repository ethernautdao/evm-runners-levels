[[levels]]
id = "1"
file = "S01E01-Average"
contract = "Average"
type = "unsigned math"
description = """
  Write a function to find the average of two unsigned integers.
  Further reading: https://bit.ly/4842Lrq
  
  average(1,1) == 1
  average(1,2) == 1
  average(2,1) == 1
  average(0,4) == 2"""

[[levels]]
id = "2"
file = "S01E02-FibHash"
contract = "FibHash"
type = "hashing"
description = """
  Implement the Fibonacci hash algorithm by multiplying the 256-bit input
  number 'x' with a constant 'a' derived from the golden ratio, where 
  a = 2^(256)/((1 + sqrt(5))/2). See '_fibhash' in S01E02-FibHash.t.sol 
  for an example implementation and https://bit.ly/fibhash for more info.
  
  fibhash(x, k) == hash
  fibhash(5, 6) == 5
  fibhash(12345, 10) == 644"""


[[levels]]
id = "3"
file = "S01E03-Fibonacci"
contract = "Fibonacci"
type = "loops/math"
description = """
  Calculate the n-th Fibonacci number.
  
  fibonacci(0) == 0
  fibonacci(1) == 1
  fibonacci(5) == 5
  fibonacci(20) == 6765"""

[[levels]]
id = "4"
file = "S01E04-Prime"
contract = "Prime"
type = "loops/math"
description = """
  Check if a given input number is prime
  
  isPrime(0) == false
  isPrime(2) == true
  isPrime(4) == false
  isPrime(7) == true"""

[[levels]]
id = "5"
file = "S01E05-ArraySort"
contract = "ArraySort"
type = "sorting"
description = """
  Given an array of uint256, sort the array in ascending order.
  The maximum length of the input array is 32.
   
  arraySort([9, 7, 8, 3, 1]) == [1, 3, 7, 8, 9]"""

[[levels]]
id = "6"
file = "S01E06-GasEater"
contract = "GasEater"
type = "n/a"
description = """
  The task is to write a set of functions that consume an exact amount of 
  gas each time they are called. Check the logs to track your gas usage.
  The contract with the smallest code size wins.
  
  function eatGas() = 719 gas
  function eatMoreGas() = 65537 gas
  function eatEvenMoreGas() = 15_485_863 gas"""

[[levels]]
id = "7"
file = "S01E07-Decompress"
contract = "Decompress"
type = "compression"
description = """
  Implement function 'decompress(bytes memory compressed)' that receives
  run-length encoded data and returns the original, uncompressed data.
  RLE is great for calldata because it's often the case that there are
  many repeated values (e.g. sequences of 0x00) in a given payload.   

  decompress(0xffff) = 0x02ff
  decompress(0xaabbbbcccccc) == 0x01aa02bb03cc
  decompress(0x00000000000000000000) == 0x0a00"""

[[levels]]
id = "8"
file = "S01E08-ModInv"
contract = "ModInv"
type = "ec math"
description = """
  Calculate the modular multiplicative inverse: a × b ≡ 1 (mod m). 
  Assume that a and m are coprime (gcd(a,m) = 1), so an inverse exists. 
  See function '_modInv' in S01E08-ModInv.t.sol for an example 
  implementation using the extended Euclidian algorithm. 

  modInv(a, m) == b
  modInv(3, 11) == 4
  modInv(3, 13) == 9"""

[[levels]]
id = "9"
file = "S01E09-EcAdd"
contract = "EcAdd"
type = "ec math"
description = """
  Perform elliptic curve addition on the secp256k1 curve used in Ethereum.
  Assume that P = (x_p, y_p) and Q = (x_q, y_q) lie on the curve. See
  function '_ecAdd' in S01E09-EcAdd.t.sol for an example implementation.
  Hint: Make use of your solution from the previous level 'modInv'.   
  
  ecAdd(P, Q) == R"""
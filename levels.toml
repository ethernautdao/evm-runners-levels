[[levels]]
id = "1"
file = "S01E01-Average"
contract = "Average"
type = "unsigned math"
description = """ /**
  * Write a function to find the average of two unsigned integers.
  * More info: https://devblogs.microsoft.com/oldnewthing/20220207-00/?p=106223
  *
  * average(1,1) == 1
  * average(1,2) == 1
  * average(2,1) == 1
  * average(0,4) == 2
  */
"""

[[levels]]
id = "2"
file = "S01E02-FibHash"
contract = "FibHash"
type = "hashing"
description = """ /**
  * Fibonacci hashing is a fast alternative to integer modulo for hash tables.
  * It utilizes the golden ratio (1.6180339...) and its relationship with
  * Fibonacci numbers to improve hash table efficiency. 
  * Your task is to implement a fibonacci hash function with inputs x and k,
  * where x is the 256-bit input number and 2^k is the size of the hash table
  *
  * fibhash(x, k) == hash
  * fibhash(5, 6) == 5
  * fibhash(12345, 10) == 644
  * fibhash(1000_000, 10) == 1012
  *
  * Further reading: 
  *   - https://bit.ly/fibonacci-hashing
  *   - https://bit.ly/multiplication-hashing
  *
  * See function _fibhash in the base test contract for an example implementation
  */
"""


[[levels]]
id = "3"
file = "S01E03-Fibonacci"
contract = "Fibonacci"
type = "loops/math"
description = """ /**
  * Calculate the n-th Fibonacci number.
  * Note: Use the modulo operator to prevent the result from overflowing.  
  *
  * fibonacci(0) == 0
  * fibonacci(1) == 1
  * fibonacci(5) == 5
  * fibonacci(20) == 6765
  */
"""

[[levels]]
id = "4"
file = "S01E04-Prime"
contract = "Prime"
type = "loops/math"
description = """ /**
  * Check if a given input number is prime
  *
  * isPrime(0) == false
  * isPrime(2) == true
  * isPrime(4) == false
  * isPrime(7) == true
  */
"""

[[levels]]
id = "5"
file = "S01E05-ArraySort"
contract = "ArraySort"
type = "sorting"
description = """ /**
  * Given an array of uint256, sort the array in ascending order and return it.
  * The maximum length of the input array is 32.
  * 
  * arraySort([9, 7, 8, 3, 1]) == [1, 3, 7, 8, 9]
  */
"""
